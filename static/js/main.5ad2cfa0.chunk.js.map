{"version":3,"sources":["components/Display.tsx","components/Key.tsx","components/DigitKeyboard.tsx","configs/index.ts","services/Operations.ts","components/Keyboard.tsx","App.tsx","index.tsx"],"names":["Display","props","className","value","Key","onClick","keyFunction","label","DigitKeyboard","renderDigitKey","handleDigit","Configs","MathFunctions","operand1","operand2","operate","memory","operation","memoryCopy","Object","assign","operand","stack","shift","workRegister","Operations","exec","Keyboard","useState","keyboardBuffer","setKeyboardBuffer","handleOperation","operationCallback","keyName","updatedBuffer","length","udateWorkRegisterCallback","App","displayBuffer","setDisplayBuffer","setMemory","enterDataCallback","unshift","StringValue","Number","newMemory","displayString","String","console","log","toExponential","makeDisplayString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ad2cfa0.chunk.js","sourcesContent":["import '../styles/display.scss'\n\ntype DisplayProps = {\n  value:string\n}\n\nexport function Display(props:DisplayProps){\n\n  \n\n  return(\n    <div className='calc-display'>\n      {props.value}\n    </div>\n  )\n}","import '../styles/key.scss'\n\ntype KeyProps = {\n  label: string,\n  keyFunction: () => void\n}\n\nexport function Key(props: KeyProps){\n\n  return(\n    <button className='calc-key' onClick={props.keyFunction}>{props.label}</button>\n  )\n}","import { Key } from \"./Key\";\n\nimport '../styles/digitKeyboard.scss'\n\ntype DigitKeyboardProps = {\n  handleDigit: (label:string) => void\n}\n\n\nexport function DigitKeyboard(props: DigitKeyboardProps){\n\n  function renderDigitKey(label:string){\n    return(\n      <Key label={label} keyFunction={() => props.handleDigit(label)} />\n    )\n  }\n  return(\n    <div className = 'digit-keyboard'>\n      {renderDigitKey( \"7\" )}\n      {renderDigitKey( \"8\" )}\n      {renderDigitKey( \"9\" )}\n\n      {renderDigitKey( \"4\" )}\n      {renderDigitKey( \"5\" )}\n      {renderDigitKey( \"6\" )}\n\n      {renderDigitKey( \"1\" )}\n      {renderDigitKey( \"2\" )}\n      {renderDigitKey( \"3\" )}\n\n      {renderDigitKey( \"0\" )}\n      {renderDigitKey( \".\" )}\n      {renderDigitKey( \"E\" )}\n    </div>\n  )\n}","export const Configs ={\n\n  MAX_DISPLAY_LENGHT: 12\n  \n}","// type OperationType = {\n//   label:string,\n//   exec: (stack:Array<number>) => Array<number>\n// }\n\ntype MemoryType = {\n  workRegister:number,\n  stack:number[]\n}\n\n\nconst MathFunctions = {\n  add:(operand1:number,operand2:number) => operand1 + operand2,\n  sub:(operand1:number,operand2:number) => operand1 - operand2,\n  mult:(operand1:number,operand2:number) => operand1 * operand2,\n  div:(operand1:number,operand2:number) => operand1 / operand2\n}\n\n\nconst operate = (\n    memory:MemoryType, \n    operation: (operand1:number,operand2:number)=> number \n  ) => {\n    \n    const memoryCopy = Object.assign({},memory);\n\n    let operand = memoryCopy.stack.shift();\n    if(!operand){\n      operand = 0;\n    }\n    //memoryCopy.workRegister += operand;\n\n    memoryCopy.workRegister = operation(memoryCopy.workRegister , operand);\n\n    return memoryCopy;\n\n}\n\n\n\nexport const Operations = {\n  \n  add:{\n    label:'+',\n    exec: (memory:MemoryType) => operate(memory , MathFunctions.add)\n  },\n  sub:{\n    label:'-',\n    exec: (memory:MemoryType) => operate(memory , MathFunctions.sub)\n  },\n  mult:{\n    label:'*',\n    exec: (memory:MemoryType) => operate(memory , MathFunctions.mult)\n  },\n  div:{\n    label:'/',\n    exec: (memory:MemoryType) => operate(memory , MathFunctions.div)\n  },\n\n  test:{\n    label:'?',\n    exec: (stack:Array<number>) => {\n    }\n  },\n  \n}\n\n","import { useState } from \"react\"\n\nimport { DigitKeyboard } from \"./DigitKeyboard\"\nimport { Key } from \"./Key\"\nimport { Configs } from '../configs'\n\nimport {Operations} from '../services/Operations'\n\nimport '../styles/keyboard.scss'\n\ntype MemoryType = {\n  workRegister:number,\n  stack:number[]\n}\n\ntype KeyboardProps = {\n  enterDataCallback: () => void,\n  udateWorkRegisterCallback: (digit:string)=> void,\n  operationCallback: (operation:(memory:MemoryType) => MemoryType ) => void\n}\n\n\nexport function Keyboard( props:KeyboardProps ){\n\n  const [keyboardBuffer, setKeyboardBuffer] = useState<string>('');\n\n\n  function handleDigit(keyName:string){\n\n    // if keyboardBuffer is empty, push last result in stack\n    // if(!keyboardBuffer){\n    //   props.operationCallback( Operations.enter.exec );\n    // }\n\n    const updatedBuffer = keyboardBuffer + keyName;\n\n    if(keyboardBuffer.length < Configs.MAX_DISPLAY_LENGHT){\n      setKeyboardBuffer(updatedBuffer);\n      props.udateWorkRegisterCallback(updatedBuffer)\n    }\n    \n\n  }\n\n  function clearBuffer(){\n    setKeyboardBuffer('');\n    props.udateWorkRegisterCallback('0');\n  }\n\n  function handleOperation(operation:(memory:MemoryType) => MemoryType){\n    setKeyboardBuffer('');\n    props.operationCallback( operation );\n  }\n\n  function handleEnterKey(){\n    setKeyboardBuffer('');\n    //props.enterDataCallback();\n  }\n\n  // function renderOperationKey(){\n\n  // }\n\n  return(\n    <div className= 'keyboard-calc'>\n      <div className='operation-keyboard'>\n        <Key label='+' keyFunction={() => handleOperation(Operations.add.exec)} />\n        <Key label='-' keyFunction={() => handleOperation(Operations.sub.exec)} />\n        <Key label='x' keyFunction={() => handleOperation(Operations.mult.exec)} />\n        <Key label='/' keyFunction={() => handleOperation(Operations.div.exec)} />\n      </div>\n      <div className = 'data-area'>\n        <DigitKeyboard handleDigit = {handleDigit} />\n        <div className='data-keyboard'>\n          <Key label='C' keyFunction={clearBuffer} />\n          <Key label='â†µ' keyFunction={handleEnterKey} />\n        </div>\n      </div>\n    </div>\n  )\n}","import { useState } from 'react';\nimport { Display } from './components/Display'\nimport { Keyboard } from './components/Keyboard'\nimport { Configs } from './configs';\n// import { Operations } from './services/Operations';\n\nimport './styles/calc.scss'\n\ntype MemoryType = {\n  workRegister:number,\n  stack:number[]\n}\n\nfunction App() {\n\n  \n  const [displayBuffer, setDisplayBuffer] = useState<string>('0');\n\n  const [memory, setMemory] = useState<MemoryType>({workRegister:0,stack:[]})\n\n\n  \n\n  function enterData(){\n    memory.stack.unshift(memory.workRegister);\n    setMemory(memory);\n  }\n \n  \n  function udateWorkRegister(StringValue:string){\n    // when keyboard buffer is empty, we are inseting a new number\n    // so push workRegister into stack.\n    if(StringValue.length === 1){\n      memory.stack.unshift(memory.workRegister);\n    }\n    memory.workRegister = Number(StringValue);\n    setMemory(memory)\n    setDisplayBuffer(StringValue);\n  }\n\n  function makeDisplayString(value: number){\n    let displayString = String(value);\n    console.log(displayString.length);\n    if(displayString.length > Configs.MAX_DISPLAY_LENGHT){\n      displayString = value.toExponential(Configs.MAX_DISPLAY_LENGHT - 5)\n    }\n    console.log(displayString);\n    return displayString;\n  }\n\n  function executeOperation(operation:(memory:MemoryType) => MemoryType ){\n    const newMemory = operation(memory);\n    setMemory( newMemory );\n\n\n    setDisplayBuffer(makeDisplayString(newMemory.workRegister));\n  }\n\n  return (\n    <div className='calc'>\n      <Display value = {displayBuffer} />\n      <Keyboard \n        enterDataCallback = {enterData} \n        udateWorkRegisterCallback = {udateWorkRegister} \n        operationCallback= {executeOperation} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}